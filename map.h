#ifndef MAP_H
#define MAP_H
#include "sprite.h"
#include "player.h"


/*char map[] =
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "................................................................"
  "..................#............................................."
  ".................########################################......."
  "................#########################################......."
  "................##.............................................."
  "................#..............................................."
  "...............##..............................................."
  ".............####..............................................."
  ".....##CS##..####.........CCC..................................E"
  "################################################################"
  "################################################################"
  ;
//*/
char map[] = 

"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"................................................................................................................................................................................................"
"..................................................................................................................##.##........................M..........#..#####.............................."
"..........................................#MC..................................................#M..C.............###S###..C....................M..........#M...................................."
"........................................######################################################.############################################################....C..##............................"
"........................................#......................................................############################################################.......#............................."
"#....C.................................##......................................................############################################################......##............................."
"........................#.#..M...##...M##......................................................############################################################.....###............................."
".#M..........##.##....###.##..#####..####...............................................M......############################################################....####............................."
".##...MCCCCCC##S##.S#####S###S#####C.####..CM................................E..........M..............................C.....................................C#####............................."
".###############################################################################################################################################################################################"     
".###############################################################################################################################################################################################"
;








  
const i32 mapHeight  = 30;
const i32 mapWidth   = 64*3;
//const i32 mapWidth = 198;
i32       coins      = 0;
const i32 maxCoins   = 4; 
static inline char MAP(i32 y,i32 x) {
	if(x > 0 && y > 0 && x < mapWidth && y < mapHeight)
		return map[mapWidth*(y) + (x)];
	else
		return '.';
	}
#define MAP_SET(y, x)  map[mapWidth*(y) + (x)]
Sprite mapTiles;
const char* nameMap[] = {
	"asset/map/0.jpg",
	"asset/map/1.png",
	"asset/map/2.png",
	"asset/map/5.png",
	"asset/map/spike.png",
	"asset/map/coin.png",
	};

void initMap(void) {
	mapTiles = initSprite(nameMap, 6, 0, 0, tileWidth, tileHeight);
	}
static inline void renderMap(void) {

	for(i32 y = 0; y < mapHeight; y++) {
		for(i32 x = 0; x < mapWidth; x++) {
			mapTiles.sizeRect.x = (x - playerPosX)*tileWidth + playerOfsetX;
			mapTiles.sizeRect.y = (y  - playerPosY)*tileHeight + playerOfsetY;
			i32 ofsetSpriteX = x; //- playerOfsetX / tileWidth ;
			i32 ofsetSpriteY = y; //- playerOfsetY / tileHeight;

			//LOG("SPRITE OFSET %d %d\n",ofsetSpriteX, ofsetSpriteY );
			//if((ofsetSpriteX > 0 && ofsetSpriteX < mapWidth*tileWidth) && (ofsetSpriteY > 0 && ofsetSpriteY < mapHeight*tileHeight)){
			renderSprite(mapTiles, 0);
			//if(MAP(ofsetSpriteY, ofsetSpriteX) == '.')
			//	renderSprite(mapTiles, 0);
			if(MAP(ofsetSpriteY, ofsetSpriteX) == '#')
				renderSprite(mapTiles, 2);
			else if(MAP(ofsetSpriteY, ofsetSpriteX) == 'C') {
				//renderSprite(mapTiles, 0);
				renderSprite(mapTiles, 5);
				}
			else if(MAP(ofsetSpriteY, ofsetSpriteX) == 'S'){
				//renderSprite(mapTiles, 0);
				renderSprite(mapTiles, 4);
			}
			else if(MAP(ofsetSpriteY, ofsetSpriteX) == 'E'){
				//renderSprite(mapTiles, 0);
				renderSprite(mapTiles, 3);
			}
			
			
			}

		}
	}


static inline void mapEventHandling() {
	//u32 posX = playerOfsetX / tileWidth;
	//u32 posY = playerOfsetY / tileHeight;
	//LOG("X %d Y %d\n", posX, posY);
	//system("pause");
	if(MAP(playerPosY + 1, playerPosX) == '#') {
		//playerVelX = 0;
		if(playerVelY > 0)
			playerVelY = 0;
		LOG("######################################\n");
		
		}
	else{

		playerVelY = 1;
	}
	//HIT A SPIKE
	if(MAP(playerPosY, playerPosX) == 'S' || MAP(playerPosY, playerPosX) == 'M') {
		system("cls");
		LOG("_________________________________________________\n");
		LOG("\t\t\tYOU LOSE!!!\n\n");
		exit(-1);
	}
		
		

	if(MAP(playerPosY - 1, playerPosX) == '#') {
		if(playerVelY < 0)
			playerVelY = 0;
		}
	else{};


	if(MAP(playerPosY, playerPosX - 1) == '#'  ) {
		if(playerVelX < 0)
			playerVelX = 0;
		}
	else{};
	if(MAP(playerPosY, playerPosX + 1) == '#') {
		if(playerVelX > 0)
			playerVelX = 0;
		}
	else{};

	if(MAP(playerPosY, playerPosX) == '#') {
		playerPosX--;
		playerPosY--;
		while(MAP(playerPosY + 1, playerPosX ) == '#'){
			playerPosY++;
		}
		}
		
		//COIN
		if(MAP(playerPosY, playerPosX) == 'C'){
			MAP_SET(playerPosY, playerPosX) = '.';
			coins++;
		}
		//EXIT AND WINING
		if(MAP(playerPosY, playerPosX) == 'E' && (maxCoins < coins)){
		system("cls");
		LOG("_________________________________________________\n");
		LOG("\t\t\tYOU WIN!!!\n\n");
		exit(-1);
		}
				
	}
#endif
